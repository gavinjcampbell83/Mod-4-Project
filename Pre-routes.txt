get all spots by current user

router.get('/current', authenticate, async (req, res) => {

  const currentUser = req.user.username; 
    
    const userSpots = await User.findOne({ 
      where: { username: currentUser },
      include: Spot
    });

    if (!userSpots) {
      return res.status(404).json({ error: 'User not found' });
    }
})

    res.status(200).json({ spots: userSpots.Spots 
    });



npx sequelize-cli model:generate --name spotImage --attributes id:integer,spotId:integer,url:string

npx sequelize-cli seed:generate --name demo-spotImage

npx sequelize-cli model:generate --name review --attributes spotId:integer,userId:integer,review:string,stars:integer

npx sequelize-cli seed:generate --name demo-review

npx sequelize-cli model:generate --name reviewImage --attributes reviewId:integer,url:string

npx sequelize-cli seed:generate --name demo-reviewImage

npx sequelize-cli model:generate --name booking --attributes spotId:integer,userId:integer,startDate:date,endDate:date



const err = new Error('Login failed');
        err.status = 401;
        err.title = 'Login failed';
        err.errors = { credential: 'The provided credentials were invalid.' };
        return next(err);
      }

      const err = new Error("message": "Bad Request");
      err.status = 401; 
             err.errors = {address: "Street address is required"},
              err.errors = {city: "City is required"},
              err.errors = {state: "State is required"},
              err.errors = {country: "Country is required"},
              err.errors = {lat: "Latitude must be within -90 and 90"},
              err.errors = {lng: "Longitude must be within -180 and 180"},
              err.errors = {name: "Name must be less than 50 characters"},
              err.errors = {description: "Description is required"},
              res.next(err)
          


router.get('/current', authenticate, async (req, res) => {
  const currentUser = req.user.username;     
    const userSpots = await User.findAll({ 
      where: { username: currentUser },
      include: { 
        Spot,
        reviewImage
        }
    });
    res.status(200).json({ spots: userSpots.reviews
    })
})




npx dotenv sequelize-cli db:seed:undo:all
npx dotenv sequelize-cli db:migrate:undo:all